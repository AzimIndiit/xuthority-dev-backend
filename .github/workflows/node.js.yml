name: Backend CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  PROJECT_NAME: backend
  BUILD_DIR: dist
  DEPLOY_DIR: backend-current
  DEPLOY_HISTORY_DIR: backend-releases
  SSH_USER: ubuntu

jobs:
  test-and-build:
    name: Run Tests and Build
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports: [27017:27017]
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports: [6379:6379]
        options: >-
          --health-cmd="redis-cli ping" 
          --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm ci

      - name: Create Test Environment File
        run: echo "${{ secrets.TEST_ENV }}" > .env.test

      - name: Run Tests
        run: npm test

      - name: Build Project
        run: npm run build

      - name: Archive Build
        run: |
          tar -czf ${{ env.PROJECT_NAME }}-deployment.tar.gz ${{ env.BUILD_DIR }} package.json ecosystem.config.js .env

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: ${{ env.PROJECT_NAME }}-deployment.tar.gz

  deploy:
    name: Deploy to Production Server
    needs: test-and-build
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact

      - name: Setup SSH Access
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Server to Known Hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts || echo "‚ö†Ô∏è ssh-keyscan failed"

      - name: Upload to Server
        run: |
          scp ${{ env.PROJECT_NAME }}-deployment.tar.gz ${{ env.SSH_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Deploy on Server
        run: |
          ssh ${{ env.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e

            DEPLOY_PATH=~/${{ env.DEPLOY_HISTORY_DIR }}/$(date +%Y%m%d%H%M%S)
            mkdir -p "$DEPLOY_PATH"
            tar -xzf /tmp/${{ env.PROJECT_NAME }}-deployment.tar.gz -C "$DEPLOY_PATH"

            [ -f "$DEPLOY_PATH/.env" ] || echo "${{ secrets.PRODUCTION_ENV }}" > "$DEPLOY_PATH/.env"

            cat <<PM2 > "$DEPLOY_PATH/ecosystem.config.js"
            module.exports = {
              apps: [{
                name: "${{ env.PROJECT_NAME }}",
                script: "./${{ env.BUILD_DIR }}/main.js",
                watch: false,
                env: {
                  NODE_ENV: "production"
                }
              }]
            };
PM2

            ln -sfn "$DEPLOY_PATH" ~/${{ env.DEPLOY_DIR }}
            cd ~/${{ env.DEPLOY_DIR }}

            pm2 startOrRestart ecosystem.config.js --env production

            echo "üü¢ Deployment completed at $(date)"

            echo "ü©∫ Running Health Check..."
            for i in {1..10}; do
              curl -fs http://localhost/api/v1/software && break || sleep 3
            done

            echo "üßπ Cleaning up old releases..."
            cd ~/${{ env.DEPLOY_HISTORY_DIR }}
            ls -1dt */ | tail -n +4 | xargs -r rm -rf

EOF
