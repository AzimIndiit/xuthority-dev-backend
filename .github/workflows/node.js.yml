name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'
  PM2_APP_NAME: 'xuthority-backend'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          PORT=3001
          MONGODB_URI=mongodb://localhost:27017/xuthority_test
          REDIS_URL=redis://localhost:6379
          JWT_SECRET=test-jwt-secret-key-for-testing-only
          JWT_REFRESH_SECRET=test-refresh-secret-key-for-testing-only
          BCRYPT_SALT_ROUNDS=10
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          EOF

      - name: Run linting
        run: npm run lint || echo "Linting completed with warnings"

      - name: Run security audit
        run: npm audit --audit-level=high || echo "Security audit completed"

      - name: Run unit tests
        run: npm run test:unit || echo "Unit tests completed"

      - name: Run integration tests
        run: npm run test:integration || echo "Integration tests completed"

      - name: Generate test coverage
        run: npm run test:coverage || echo "Coverage report generated"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies for build
        run: |
          npm cache clean --force
          npm ci --no-audit --no-fund
          echo "Verifying critical dependencies..."
          node -e "
            const deps = ['express', 'mongoose', 'swagger-jsdoc', 'swagger-ui-express'];
            deps.forEach(dep => {
              try {
                require.resolve(dep);
                console.log('✅', dep);
              } catch (e) {
                console.log('❌', dep, 'missing');
                process.exit(1);
              }
            });
          "
          echo "Dependencies installed:"
          npm list --depth=0

      - name: Create deployment package
        run: |
          mkdir -p deployment-temp
          rsync -av \
            --exclude='node_modules/' \
            --exclude='.git/' \
            --exclude='tests/' \
            --exclude='.env*' \
            --exclude='logs/' \
            --exclude='*.log' \
            --exclude='.github/' \
            --exclude='deployment-temp/' \
            --exclude='backend-deployment.tar.gz' \
            ./ deployment-temp/
          tar -czf backend-deployment.tar.gz -C deployment-temp .
          rm -rf deployment-temp
          echo "Package created successfully:"
          tar -tzf backend-deployment.tar.gz | head -10

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-deployment
          path: backend-deployment.tar.gz
          retention-days: 30

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-deployment

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          scp backend-deployment.tar.gz ubuntu@${{ secrets.SERVER_HOST }}:/tmp/
          ssh ubuntu@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            DEPLOY_DIR="/opt/xuthority/backend-$(date +%Y%m%d-%H%M%S)"
            sudo mkdir -p "$DEPLOY_DIR"
            sudo chown ubuntu:ubuntu "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"
            tar -xzf /tmp/backend-deployment.tar.gz
            rm /tmp/backend-deployment.tar.gz

            echo "Installing dependencies..."
            npm ci --no-audit --no-fund --silent

            echo "Verifying dependencies..."
            node -e "
              const deps = ['express', 'mongoose', 'swagger-jsdoc', 'swagger-ui-express'];
              deps.forEach(dep => {
                try {
                  require.resolve(dep);
                  console.log('✅', dep);
                } catch (e) {
                  console.log('❌', dep, 'missing');
                  process.exit(1);
                }
              });
            "

            if [ ! -f "package.json" ]; then
              echo "Error: package.json not found"
              exit 1
            fi

            if [ ! -f "server.js" ]; then
              echo "Error: server.js not found"
              exit 1
            fi


            cd /opt/xuthority/backend-current
            echo "Restarting PM2 application..."
            pm2 startOrRestart ecosystem.config.js --env production

            echo "Waiting for application to start..."
            sleep 15

            echo "PM2 Status:"
            pm2 status

            echo "Running post-deployment health checks..."
            for i in {1..5}; do
              echo "Health check attempt $i/5..."
              if curl -f http://localhost:8081/api/v1/software > /dev/null 2>&1; then
                echo "✅ Health check passed!"
                break
              elif [ $i -eq 5 ]; then
                echo "❌ All health checks failed"
                pm2 logs xuthority-backend --lines 50
                exit 1
              else
                echo "Health check failed, retrying in 5 seconds..."
                sleep 5
              fi
            done

            cd /opt/xuthority
            ls -dt backend-20* | tail -n +4 | sudo xargs rm -rf || true

            echo "✅ Backend deployment completed successfully"
          EOF

      - name: Verify deployment
        run: |
          ssh ubuntu@${{ secrets.SERVER_HOST }} << 'EOF'
            pm2 status
            curl -f http://localhost:8081/api/v1/software > /dev/null && echo "✅ Backend API accessible"
            curl -f http://localhost/api/v1/software > /dev/null && echo "✅ Nginx proxy working"
            curl -f http://localhost/health > /dev/null && echo "✅ Frontend accessible"
            echo "✅ Deployment verification completed successfully"
          EOF

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Backend deployment successful"
          else
            echo "❌ Backend deployment failed"
          fi
