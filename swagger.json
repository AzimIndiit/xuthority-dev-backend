{
  "openapi": "3.0.0",
  "info": {
    "title": "Xuthority API",
    "version": "1.0.0",
    "description": "Automatically generated API documentation.",
    "contact": {
      "name": "Xuthority",
      "url": "https://xuthority.com",
      "email": "support@xuthority.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "termsOfService": "https://xuthority.com/terms",
    "xuthority": "https://xuthority.com",
    "xuthorityDev": "https://xuthority-dev.com",
    "xuthorityDevApi": "http://localhost:8081/api/v1",
    "xuthorityDevApiDocs": "http://localhost:8081/api-docs",
    "xuthorityDevApiDocsSwagger": "http://localhost:8081/swagger.json",
    "xuthorityDevApiDocsSwaggerUi": "http://localhost:8081/api-docs",
    "xuthorityDevApiDocsSwaggerUiSwagger": "http://localhost:8081/swagger.json"
  },
  "servers": [
    {
      "url": "http://localhost:8081/api/v1"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Blog": {
        "type": "object",
        "required": [
          "authorName",
          "title",
          "description",
          "tag",
          "resourceCategoryId"
        ],
        "properties": {
          "authorName": {
            "type": "string",
            "maxLength": 100
          },
          "designation": {
            "type": "string",
            "maxLength": 100
          },
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200
          },
          "slug": {
            "type": "string"
          },
          "mediaUrl": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "minLength": 10
          },
          "watchUrl": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "resourceCategoryId": {
            "type": "string",
            "format": "objectId"
          }
        }
      },
      "Dispute": {
        "type": "object",
        "required": [
          "review",
          "vendor",
          "product",
          "reason",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Auto-generated dispute ID"
          },
          "review": {
            "type": "string",
            "description": "Product review ID being disputed"
          },
          "vendor": {
            "type": "string",
            "description": "Vendor creating the dispute"
          },
          "product": {
            "type": "string",
            "description": "Product ID"
          },
          "reason": {
            "type": "string",
            "enum": [
              "false-or-misleading-information",
              "spam-or-fake-review",
              "inappropriate-content",
              "conflict-of-interest",
              "other"
            ],
            "description": "Reason for dispute"
          },
          "description": {
            "type": "string",
            "description": "Detailed explanation of the dispute",
            "minLength": 10,
            "maxLength": 2000
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "resolved"
            ],
            "description": "Current status of the dispute",
            "default": "active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Favorite": {
        "type": "object",
        "required": [
          "userId",
          "productId",
          "listName"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "format": "objectId"
          },
          "userId": {
            "type": "string",
            "format": "objectId"
          },
          "productId": {
            "type": "string",
            "format": "objectId"
          },
          "listName": {
            "type": "string",
            "maxLength": 100
          },
          "isDefault": {
            "type": "boolean"
          },
          "notes": {
            "type": "string",
            "maxLength": 500
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Language": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the language"
          },
          "name": {
            "type": "string",
            "description": "Name of the language"
          },
          "code": {
            "type": "string",
            "description": "ISO language code"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly identifier"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the language is active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LanguageCreate": {
        "type": "object",
        "required": [
          "name",
          "code"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the language"
          },
          "code": {
            "type": "string",
            "description": "ISO language code"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly identifier (optional)"
          }
        }
      },
      "LanguageUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the language"
          },
          "code": {
            "type": "string",
            "description": "ISO language code"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly identifier"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the language is active"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "status": {
            "type": "integer",
            "description": "HTTP status code"
          }
        }
      },
      "ResourceCategory": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100
          },
          "slug": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          }
        }
      },
      "Software": {
        "type": "object",
        "required": [
          "name",
          "createdBy"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Software ID"
          },
          "name": {
            "type": "string",
            "description": "Software name"
          },
          "slug": {
            "type": "string",
            "description": "Software slug (auto-generated)"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "default": "active",
            "description": "Software status"
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created the software"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Solution": {
        "type": "object",
        "required": [
          "name",
          "createdBy"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Solution ID"
          },
          "name": {
            "type": "string",
            "description": "Solution name"
          },
          "slug": {
            "type": "string",
            "description": "Solution slug (auto-generated)"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "default": "active",
            "description": "Solution status"
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created the solution"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a new user",
        "description": "Create a new user account with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "lastName",
                  "email",
                  "password",
                  "acceptedTerms"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "User's first name",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "User's last name",
                    "example": "Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "description": "User's password (min 8 characters)",
                    "example": "Password123!"
                  },
                  "acceptedTerms": {
                    "type": "boolean",
                    "description": "User must accept terms and conditions",
                    "example": true
                  },
                  "acceptedMarketing": {
                    "type": "boolean",
                    "description": "User's marketing preferences",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "507f1f77bcf86cd799439011"
                            },
                            "firstName": {
                              "type": "string",
                              "example": "John"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Doe"
                            },
                            "email": {
                              "type": "string",
                              "example": "john.doe@example.com"
                            },
                            "role": {
                              "type": "string",
                              "example": "user"
                            }
                          }
                        },
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User already exists"
                        },
                        "code": {
                          "type": "string",
                          "example": "USER_ALREADY_EXISTS"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login user",
        "description": "Authenticate user with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password",
                    "example": "Password123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "JWT access token"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "507f1f77bcf86cd799439011"
                            },
                            "firstName": {
                              "type": "string",
                              "example": "John"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Doe"
                            },
                            "email": {
                              "type": "string",
                              "example": "john.doe@example.com"
                            },
                            "role": {
                              "type": "string",
                              "example": "user"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid credentials"
                        },
                        "code": {
                          "type": "string",
                          "example": "INVALID_CREDENTIALS"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 401
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/register-vendor": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a new vendor",
        "description": "Create a new vendor account with company information",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "lastName",
                  "email",
                  "password",
                  "companyName",
                  "companyEmail",
                  "industry",
                  "companySize",
                  "acceptedTerms"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "Vendor's first name",
                    "example": "Jane"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Vendor's last name",
                    "example": "Smith"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Vendor's email address",
                    "example": "jane.smith@company.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "description": "Vendor's password",
                    "example": "Password123!"
                  },
                  "companyName": {
                    "type": "string",
                    "description": "Company name",
                    "example": "Tech Solutions Inc"
                  },
                  "companyEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Company email address",
                    "example": "contact@techsolutions.com"
                  },
                  "industry": {
                    "type": "string",
                    "description": "Industry sector",
                    "example": "Technology"
                  },
                  "companySize": {
                    "type": "string",
                    "description": "Company size category",
                    "example": "51-100 Employees"
                  },
                  "acceptedTerms": {
                    "type": "boolean",
                    "description": "Vendor must accept terms",
                    "example": true
                  },
                  "acceptedMarketing": {
                    "type": "boolean",
                    "description": "Marketing preferences",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vendor registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "507f1f77bcf86cd799439011"
                            },
                            "firstName": {
                              "type": "string",
                              "example": "Jane"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Smith"
                            },
                            "email": {
                              "type": "string",
                              "example": "jane.smith@company.com"
                            },
                            "role": {
                              "type": "string",
                              "example": "vendor"
                            },
                            "companyName": {
                              "type": "string",
                              "example": "Tech Solutions Inc"
                            }
                          }
                        },
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Vendor registered successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request password reset",
        "description": "Send password reset email to user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Password reset email sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email or OAuth user"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset password with token",
        "description": "Reset user password using reset token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "newPassword",
                  "confirmNewPassword"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Password reset token",
                    "example": "abc123def456..."
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 8,
                    "description": "New password",
                    "example": "NewPassword123!"
                  },
                  "confirmNewPassword": {
                    "type": "string",
                    "description": "Password confirmation",
                    "example": "NewPassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid token or validation error"
          }
        }
      }
    },
    "/auth/verify-reset-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify reset token",
        "description": "Verify if password reset token is valid",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Password reset token to verify",
                    "example": "abc123def456..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset token is valid"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google OAuth login",
        "description": "Initiate Google OAuth authentication",
        "parameters": [
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "vendor"
              ],
              "default": "user"
            },
            "description": "Role for the user account (user or vendor)"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth"
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google OAuth callback",
        "description": "Handle Google OAuth callback",
        "responses": {
          "200": {
            "description": "OAuth login successful"
          },
          "401": {
            "description": "OAuth login failed"
          }
        }
      }
    },
    "/auth/google/failure": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google OAuth failure",
        "description": "Handle Google OAuth failure",
        "responses": {
          "401": {
            "description": "OAuth login failed"
          }
        }
      }
    },
    "/auth/linkedin": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "LinkedIn OAuth login",
        "description": "Initiate LinkedIn OAuth authentication",
        "parameters": [
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "vendor"
              ],
              "default": "user"
            },
            "description": "Role for the user account (user or vendor)"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to LinkedIn OAuth"
          }
        }
      }
    },
    "/auth/linkedin/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "LinkedIn OAuth callback",
        "description": "Handle LinkedIn OAuth callback",
        "responses": {
          "200": {
            "description": "OAuth login successful"
          },
          "401": {
            "description": "OAuth login failed"
          }
        }
      }
    },
    "/auth/linkedin/failure": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "LinkedIn OAuth failure",
        "description": "Handle LinkedIn OAuth failure",
        "responses": {
          "401": {
            "description": "OAuth login failed"
          }
        }
      }
    },
    "/auth/linkedin/verify": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "LinkedIn verification for review verification",
        "description": "Initiate LinkedIn OAuth authentication specifically for review verification",
        "responses": {
          "302": {
            "description": "Redirect to LinkedIn OAuth"
          }
        }
      }
    },
    "/auth/linkedin/verify/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "LinkedIn verification callback",
        "description": "Handle LinkedIn verification callback for review verification",
        "responses": {
          "200": {
            "description": "LinkedIn verification successful"
          },
          "401": {
            "description": "LinkedIn verification failed"
          }
        }
      }
    },
    "/auth/linkedin/verify/failure": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "LinkedIn verification failure",
        "description": "Handle LinkedIn verification failure",
        "responses": {
          "401": {
            "description": "LinkedIn verification failed"
          }
        }
      }
    },
    "/api/v1/blogs": {
      "post": {
        "summary": "Create a new blog",
        "tags": [
          "Blogs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blog created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all blogs",
        "tags": [
          "Blogs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blogs retrieved successfully"
          }
        }
      }
    },
    "/api/v1/blogs/active": {
      "get": {
        "summary": "Get active blogs",
        "tags": [
          "Blogs"
        ],
        "responses": {
          "200": {
            "description": "Active blogs retrieved successfully"
          }
        }
      }
    },
    "/api/v1/blogs/grouped-by-categories": {
      "get": {
        "summary": "Get blogs grouped by categories with limit",
        "tags": [
          "Blogs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 6
            },
            "description": "Number of blogs per category"
          }
        ],
        "responses": {
          "200": {
            "description": "Blogs grouped by categories retrieved successfully"
          }
        }
      }
    },
    "/api/v1/blogs/category/{categoryId}": {
      "get": {
        "summary": "Get blogs by category",
        "tags": [
          "Blogs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blogs retrieved successfully"
          }
        }
      }
    },
    "/api/v1/blogs/tag/{tag}": {
      "get": {
        "summary": "Get blogs by tag",
        "tags": [
          "Blogs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blogs retrieved successfully"
          }
        }
      }
    },
    "/api/v1/blogs/slug/{slug}": {
      "get": {
        "summary": "Get blog by slug",
        "tags": [
          "Blogs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog retrieved successfully"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      }
    },
    "/api/v1/blogs/{id}": {
      "get": {
        "summary": "Get blog by ID",
        "tags": [
          "Blogs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog retrieved successfully"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      },
      "put": {
        "summary": "Update blog",
        "tags": [
          "Blogs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Blog updated successfully"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      },
      "delete": {
        "summary": "Delete blog",
        "tags": [
          "Blogs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog deleted successfully"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      }
    },
    "/api/v1/blogs/{id}/toggle-status": {
      "patch": {
        "summary": "Toggle blog status",
        "tags": [
          "Blogs"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog status toggled successfully"
          },
          "404": {
            "description": "Blog not found"
          }
        }
      }
    },
    "/api/v1/disputes": {
      "post": {
        "summary": "Create a new dispute on a product review",
        "tags": [
          "Disputes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reviewId",
                  "reason",
                  "description"
                ],
                "properties": {
                  "reviewId": {
                    "type": "string",
                    "description": "ID of the review to dispute"
                  },
                  "reason": {
                    "type": "string",
                    "enum": [
                      "false-or-misleading-information",
                      "spam-or-fake-review",
                      "inappropriate-content",
                      "conflict-of-interest",
                      "other"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 2000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dispute created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - not product owner"
          }
        }
      },
      "get": {
        "summary": "Get vendor's disputes with pagination",
        "tags": [
          "Disputes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "resolved"
              ]
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "status"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disputes retrieved successfully"
          }
        }
      }
    },
    "/api/v1/disputes/all": {
      "get": {
        "summary": "Get all disputes (Admin only)",
        "tags": [
          "Disputes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "resolved"
              ]
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "status"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All disputes retrieved successfully"
          }
        }
      }
    },
    "/api/v1/disputes/{id}": {
      "get": {
        "summary": "Get dispute by ID",
        "tags": [
          "Disputes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute retrieved successfully"
          },
          "404": {
            "description": "Dispute not found"
          }
        }
      },
      "put": {
        "summary": "Update dispute",
        "tags": [
          "Disputes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "enum": [
                      "false-or-misleading-information",
                      "spam-or-fake-review",
                      "inappropriate-content",
                      "conflict-of-interest",
                      "other"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 2000
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "resolved"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Dispute updated successfully"
          },
          "404": {
            "description": "Dispute not found"
          }
        }
      },
      "delete": {
        "summary": "Delete dispute",
        "tags": [
          "Disputes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute deleted successfully"
          },
          "404": {
            "description": "Dispute not found"
          }
        }
      }
    },
    "/api/v1/disputes/{id}/explanation": {
      "post": {
        "summary": "Add explanation to dispute",
        "tags": [
          "Disputes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "explanation"
                ],
                "properties": {
                  "explanation": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 2000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Explanation added successfully"
          },
          "404": {
            "description": "Dispute not found"
          }
        }
      }
    },
    "/api/v1/disputes/{id}/explanation/{explanationId}": {
      "put": {
        "summary": "Update explanation in dispute",
        "tags": [
          "Disputes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "explanationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "explanation"
                ],
                "properties": {
                  "explanation": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 2000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Explanation updated successfully"
          },
          "403": {
            "description": "Unauthorized to update this explanation"
          },
          "404": {
            "description": "Dispute or explanation not found"
          }
        }
      }
    },
    "/api/favorites": {
      "post": {
        "summary": "Add product to favorites",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "productId"
                ],
                "properties": {
                  "productId": {
                    "type": "string",
                    "format": "objectId"
                  },
                  "listName": {
                    "type": "string",
                    "default": "Favorite List"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product added to favorites successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found"
          },
          "409": {
            "description": "Product already in favorites"
          }
        }
      }
    },
    "/api/favorites/{productId}": {
      "delete": {
        "summary": "Remove product from favorites",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          },
          {
            "in": "query",
            "name": "listName",
            "schema": {
              "type": "string"
            },
            "description": "Specific list name (optional)"
          }
        ],
        "responses": {
          "200": {
            "description": "Product removed from favorites successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Favorite not found"
          }
        }
      }
    },
    "/api/favorites/lists": {
      "get": {
        "summary": "Get user's favorite lists",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search in list names and product names"
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite lists retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new favorite list",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "listName"
                ],
                "properties": {
                  "listName": {
                    "type": "string",
                    "maxLength": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Favorite list created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "List already exists"
          }
        }
      }
    },
    "/api/favorites/lists/{listName}/products": {
      "get": {
        "summary": "Get products in a specific favorite list",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "listName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 12
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "name",
                "avgRating"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite list products retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "List not found"
          }
        }
      }
    },
    "/api/favorites/lists/{listName}": {
      "put": {
        "summary": "Rename a favorite list",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "listName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newListName"
                ],
                "properties": {
                  "newListName": {
                    "type": "string",
                    "maxLength": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Favorite list renamed successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "List not found"
          },
          "409": {
            "description": "New list name already exists"
          }
        }
      },
      "delete": {
        "summary": "Delete a favorite list",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "listName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite list deleted successfully"
          },
          "400": {
            "description": "Cannot delete default list"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "List not found"
          }
        }
      }
    },
    "/api/favorites/check/{productId}": {
      "get": {
        "summary": "Check if product is in user's favorites",
        "tags": [
          "Favorites"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite status retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/files/upload": {
      "post": {
        "summary": "Upload a single file",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "File to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fileId": {
                          "type": "string",
                          "description": "Unique file identifier"
                        },
                        "fileName": {
                          "type": "string",
                          "description": "Original file name"
                        },
                        "fileSize": {
                          "type": "number",
                          "description": "File size in bytes"
                        },
                        "fileType": {
                          "type": "string",
                          "description": "MIME type of the file"
                        },
                        "uploadDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Upload timestamp"
                        },
                        "fileUrl": {
                          "type": "string",
                          "description": "URL to access the uploaded file"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "File uploaded successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid file or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid file type or size"
                        },
                        "code": {
                          "type": "string",
                          "example": "FILE_VALIDATION_ERROR"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 400
                        },
                        "details": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Authentication required"
                        },
                        "code": {
                          "type": "string",
                          "example": "UNAUTHORIZED"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 401
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload too large - File size exceeds limit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "File size exceeds maximum limit"
                        },
                        "code": {
                          "type": "string",
                          "example": "FILE_TOO_LARGE"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 413
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Internal server error"
                        },
                        "code": {
                          "type": "string",
                          "example": "INTERNAL_ERROR"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/files/upload-multiple": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload multiple files",
        "description": "Upload multiple files (up to 5 files) to the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Array of files to upload (max 5 files)",
                    "minItems": 1,
                    "maxItems": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Files uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "507f1f77bcf86cd799439011"
                              },
                              "filename": {
                                "type": "string",
                                "example": "document.pdf"
                              },
                              "originalName": {
                                "type": "string",
                                "example": "original-document.pdf"
                              },
                              "mimeType": {
                                "type": "string",
                                "example": "application/pdf"
                              },
                              "size": {
                                "type": "integer",
                                "example": 1024000
                              },
                              "url": {
                                "type": "string",
                                "example": "https://s3.amazonaws.com/bucket/document.pdf"
                              },
                              "uploadedAt": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2024-01-15T10:30:00.000Z"
                              }
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Files uploaded successfully"
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "example": 3
                        },
                        "uploaded": {
                          "type": "integer",
                          "example": 3
                        },
                        "failed": {
                          "type": "integer",
                          "example": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid file data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid file data"
                        },
                        "code": {
                          "type": "string",
                          "example": "INVALID_FILE_DATA"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Authentication required"
                        },
                        "code": {
                          "type": "string",
                          "example": "UNAUTHORIZED"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 401
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload too large - File size exceeds limit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "File size exceeds maximum limit"
                        },
                        "code": {
                          "type": "string",
                          "example": "FILE_TOO_LARGE"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 413
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Internal server error"
                        },
                        "code": {
                          "type": "string",
                          "example": "INTERNAL_ERROR"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 500
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/follow/toggle/{userId}": {
      "post": {
        "summary": "Toggle follow/unfollow a user",
        "description": "Follow or unfollow a user. If already following, it will unfollow. If not following, it will follow.",
        "tags": [
          "Follow"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "description": "ID of the user to follow/unfollow"
          }
        ],
        "responses": {
          "200": {
            "description": "Follow status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "followed",
                            "unfollowed"
                          ],
                          "description": "The action performed"
                        },
                        "isFollowing": {
                          "type": "boolean",
                          "description": "Current follow status after toggle"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            },
                            "followersCount": {
                              "type": "number"
                            },
                            "followingCount": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully followed user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Target user not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/follow/{userId}/followers": {
      "get": {
        "summary": "Get a specific user's followers (public)",
        "tags": [
          "Follow"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term for filtering followers"
          }
        ],
        "responses": {
          "200": {
            "description": "User followers retrieved successfully"
          }
        }
      }
    },
    "/follow/{userId}/following": {
      "get": {
        "summary": "Get a specific user's following (public)",
        "tags": [
          "Follow"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term for filtering following"
          }
        ],
        "responses": {
          "200": {
            "description": "User following retrieved successfully"
          }
        }
      }
    },
    "/follow/{userId}/stats": {
      "get": {
        "summary": "Get user's follow statistics",
        "description": "Retrieve follow statistics for the specified user including follower and following counts",
        "tags": [
          "Follow"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "description": "ID of the user whose statistics to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved follow statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "followersCount": {
                          "type": "number",
                          "description": "Number of users following this user"
                        },
                        "followingCount": {
                          "type": "number",
                          "description": "Number of users this user is following"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Follow statistics retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/followers/{userId}/remove": {
      "delete": {
        "summary": "Remove a follower",
        "tags": [
          "Follow"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the follower to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed follower"
          },
          "400": {
            "description": "User is not a follower"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/follow/status/{userId}": {
      "get": {
        "summary": "Check if current user is following a specific user",
        "tags": [
          "Follow"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to check"
          }
        ],
        "responses": {
          "200": {
            "description": "Follow status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "isFollowing": {
                          "type": "boolean"
                        },
                        "userId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/industries": {
      "get": {
        "summary": "Get all industries",
        "description": "Retrieve a list of all industries with optional filtering and pagination",
        "tags": [
          "Industries"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter industries by name"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "all"
              ],
              "default": "all"
            },
            "description": "Filter industries by status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of industries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Industry"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new industry",
        "description": "Create a new industry (requires admin or vendor role)",
        "tags": [
          "Industries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "description"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 100,
                    "description": "The name of the industry"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 1000,
                    "description": "The description of the industry"
                  },
                  "slug": {
                    "type": "string",
                    "pattern": "^[a-z0-9-]+$",
                    "description": "Custom slug for the industry (optional)"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "active",
                    "description": "The status of the industry"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Industry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "409": {
            "description": "Conflict - Industry with same name or slug already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/industries/active": {
      "get": {
        "summary": "Get active industries",
        "description": "Retrieve a list of only active industries",
        "tags": [
          "Industries"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter industries by name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active industries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Industry"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/industries/slug/{slug}": {
      "get": {
        "summary": "Get industry by slug",
        "description": "Retrieve a specific industry by its slug",
        "tags": [
          "Industries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9-]+$"
            },
            "description": "The slug of the industry"
          }
        ],
        "responses": {
          "200": {
            "description": "Industry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid slug format"
          },
          "404": {
            "description": "Industry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/industries/{industryId}": {
      "get": {
        "summary": "Get industry by ID",
        "description": "Retrieve a specific industry by its ID",
        "tags": [
          "Industries"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "industryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the industry"
          }
        ],
        "responses": {
          "200": {
            "description": "Industry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid industry ID format"
          },
          "404": {
            "description": "Industry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update an industry",
        "description": "Update an existing industry by ID (requires admin or vendor role)",
        "tags": [
          "Industries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "industryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the industry"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 100,
                    "description": "The name of the industry"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 1000,
                    "description": "The description of the industry"
                  },
                  "slug": {
                    "type": "string",
                    "pattern": "^[a-z0-9-]+$",
                    "description": "Custom slug for the industry"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "active",
                    "description": "The status of the industry"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Industry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Industry not found"
          },
          "409": {
            "description": "Conflict - Industry with same name or slug already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete an industry",
        "description": "Delete an industry by ID (requires admin role)",
        "tags": [
          "Industries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "industryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the industry"
          }
        ],
        "responses": {
          "200": {
            "description": "Industry deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Industry deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Industry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/industries/{industryId}/toggle-status": {
      "patch": {
        "summary": "Toggle industry status",
        "description": "Toggle the status of an industry between active and inactive (requires admin or vendor role)",
        "tags": [
          "Industries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "industryId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the industry"
          }
        ],
        "responses": {
          "200": {
            "description": "Industry status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Industry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/integrations": {
      "get": {
        "summary": "Get all integrations",
        "description": "Retrieve a list of all integrations with optional filtering and pagination",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "all"
              ],
              "default": "all"
            },
            "description": "Filter by integration status"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by integration category"
          }
        ],
        "responses": {
          "200": {
            "description": "List of integrations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Integration"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new integration",
        "description": "Create a new integration (requires admin or vendor role)",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "slug",
                  "description",
                  "category"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "The name of the integration"
                  },
                  "slug": {
                    "type": "string",
                    "pattern": "^[a-z0-9-]+$",
                    "description": "The unique slug for the integration"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1000,
                    "description": "Detailed description of the integration"
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "payment",
                      "shipping",
                      "analytics",
                      "marketing",
                      "other"
                    ],
                    "description": "The category of the integration"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "inactive",
                    "description": "The status of the integration"
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration object for the integration"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the integration"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Integration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Integration"
                    },
                    "message": {
                      "type": "string",
                      "example": "Integration created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "409": {
            "description": "Conflict - Integration with this slug already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/integrations/active": {
      "get": {
        "summary": "Get active integrations",
        "description": "Retrieve a list of all active integrations",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by integration category"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active integrations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Integration"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/integrations/slug/{slug}": {
      "get": {
        "summary": "Get integration by slug",
        "description": "Retrieve a specific integration by its slug",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9-]+$"
            },
            "description": "The slug of the integration"
          }
        ],
        "responses": {
          "200": {
            "description": "Integration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid slug format"
          },
          "404": {
            "description": "Integration not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/integrations/{integrationId}": {
      "get": {
        "summary": "Get integration by ID",
        "description": "Retrieve a specific integration by its ID",
        "tags": [
          "Integrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the integration"
          }
        ],
        "responses": {
          "200": {
            "description": "Integration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid integration ID format"
          },
          "404": {
            "description": "Integration not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update an integration",
        "description": "Update an existing integration (requires admin or vendor role)",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the integration"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "The name of the integration"
                  },
                  "slug": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50,
                    "pattern": "^[a-z0-9-]+$",
                    "description": "URL-friendly identifier for the integration"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Detailed description of the integration"
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "payment",
                      "shipping",
                      "analytics",
                      "marketing",
                      "other"
                    ],
                    "description": "The category of the integration"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "The status of the integration"
                  },
                  "config": {
                    "type": "object",
                    "description": "Configuration object for the integration"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the integration"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Integration"
                    },
                    "message": {
                      "type": "string",
                      "example": "Integration updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Integration not found"
          },
          "409": {
            "description": "Conflict - Integration with this slug already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete an integration",
        "description": "Delete an integration (requires admin role)",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the integration"
          }
        ],
        "responses": {
          "200": {
            "description": "Integration deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Integration deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Integration not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/integrations/{integrationId}/toggle-status": {
      "patch": {
        "summary": "Toggle integration status",
        "description": "Toggle the status of an integration between active and inactive (requires admin or vendor role)",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifier of the integration"
          }
        ],
        "responses": {
          "200": {
            "description": "Integration status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Integration"
                    },
                    "message": {
                      "type": "string",
                      "example": "Integration status updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "401": {
            "description": "Unauthorized - Authentication required"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Integration not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/languages/active": {
      "get": {
        "summary": "Get all active languages",
        "description": "Retrieve a list of all active languages",
        "tags": [
          "Languages"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active languages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Language"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "pages": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/languages": {
      "get": {
        "summary": "Get all languages with filtering",
        "description": "Retrieve a list of all languages with optional filtering and pagination",
        "tags": [
          "Languages"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term for filtering languages"
          },
          {
            "in": "query",
            "name": "isActive",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by active status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of languages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Language"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "pages": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new language",
        "description": "Create a new language (admin only)",
        "tags": [
          "Languages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LanguageCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Language created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Language"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "/{id}": {
          "summary": "Update language",
          "description": "Update an existing language (admin only)",
          "tags": [
            "Languages"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Language ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": null,
              "schema": {
                "$ref": "#/components/schemas/LanguageUpdate"
              }
            }
          },
          "responses": {
            "200": {
              "description": "Language updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Language"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden - Admin access required",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "description": "Language not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "/{id}/toggle-status": {
          "summary": "Toggle language status",
          "description": "Toggle the active status of a language (admin only)",
          "tags": [
            "Languages"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Language ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Language status toggled successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Language"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden - Admin access required",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "description": "Language not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "/{id}": {
          "summary": "Delete language",
          "description": "Delete a language (admin only)",
          "tags": [
            "Languages"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Language ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Language deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden - Admin access required",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "description": "Language not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/languages/{id}": {
      "get": {
        "summary": "Get language by ID",
        "description": "Retrieve a specific language by its ID",
        "tags": [
          "Languages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Language ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Language retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Language"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Language not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/languages/slug/{slug}": {
      "get": {
        "summary": "Get language by slug",
        "description": "Retrieve a specific language by its slug",
        "tags": [
          "Languages"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Language slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Language retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Language"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Language not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/market-segments": {
      "get": {
        "summary": "Get all market segments",
        "description": "Retrieve a list of all market segments with optional filtering and pagination",
        "tags": [
          "Market Segments"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter market segments"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            },
            "description": "Filter by status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of market segments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MarketSegment"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid query parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new market segment",
        "description": "Create a new market segment (requires admin or vendor role)",
        "tags": [
          "Market Segments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "description"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "Name of the market segment"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 500,
                    "description": "Description of the market segment"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "active",
                    "description": "Status of the market segment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Market segment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/MarketSegment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data"
          },
          "401": {
            "description": "Unauthorized - authentication required"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "409": {
            "description": "Conflict - market segment with same name already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/market-segments/active": {
      "get": {
        "summary": "Get active market segments",
        "description": "Retrieve a list of only active market segments",
        "tags": [
          "Market Segments"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter market segments"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active market segments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MarketSegment"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid query parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/market-segments/slug/{slug}": {
      "get": {
        "summary": "Get market segment by slug",
        "description": "Retrieve a specific market segment using its slug",
        "tags": [
          "Market Segments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The slug of the market segment"
          }
        ],
        "responses": {
          "200": {
            "description": "Market segment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/MarketSegment"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Market segment not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/market-segments/{marketSegmentId}": {
      "get": {
        "summary": "Get market segment by ID",
        "description": "Retrieve a specific market segment using its ID",
        "tags": [
          "Market Segments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "marketSegmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the market segment"
          }
        ],
        "responses": {
          "200": {
            "description": "Market segment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/MarketSegment"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Market segment not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update a market segment",
        "description": "Update an existing market segment (requires admin or vendor role)",
        "tags": [
          "Market Segments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "marketSegmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the market segment to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "Name of the market segment"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 500,
                    "description": "Description of the market segment"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Status of the market segment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Market segment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/MarketSegment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data"
          },
          "401": {
            "description": "Unauthorized - authentication required"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - market segment not found"
          },
          "409": {
            "description": "Conflict - market segment with same name already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a market segment",
        "description": "Delete a market segment (requires admin role)",
        "tags": [
          "Market Segments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "marketSegmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the market segment to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Market segment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Market segment deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - market segment not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/market-segments/{marketSegmentId}/toggle-status": {
      "patch": {
        "summary": "Toggle market segment status",
        "description": "Toggle the status of a market segment between active and inactive (requires admin or vendor role)",
        "tags": [
          "Market Segments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "marketSegmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the market segment to toggle status"
          }
        ],
        "responses": {
          "200": {
            "description": "Market segment status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/MarketSegment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data"
          },
          "401": {
            "description": "Unauthorized - authentication required"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Not found - market segment not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/otp/create": {
      "post": {
        "tags": [
          "OTP"
        ],
        "summary": "Create OTP for review verification",
        "description": "Send OTP to user's email for review verification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "type"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "review_verification",
                      "password_reset",
                      "email_verification"
                    ],
                    "description": "Type of OTP",
                    "example": "review_verification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "OTP sent successfully. Please check your email."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "expiresAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T12:00:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/otp/verify": {
      "post": {
        "tags": [
          "OTP"
        ],
        "summary": "Verify OTP for review verification",
        "description": "Verify the OTP code sent to user's email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "otp",
                  "type"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "description": "6-digit OTP code",
                    "example": "123456"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "review_verification",
                      "password_reset",
                      "email_verification"
                    ],
                    "description": "Type of OTP",
                    "example": "review_verification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "OTP verified successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "verifiedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T12:00:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid OTP or validation error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/otp/resend": {
      "post": {
        "tags": [
          "OTP"
        ],
        "summary": "Resend OTP for review verification",
        "description": "Resend OTP to user's email if the previous one expired",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "type"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "review_verification",
                      "password_reset",
                      "email_verification"
                    ],
                    "description": "Type of OTP",
                    "example": "review_verification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "OTP resent successfully. Please check your email."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "expiresAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T12:00:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No active OTP found"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/product-reviews": {
      "post": {
        "summary": "Create a new product review",
        "tags": [
          "Product Reviews"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "product",
                  "overallRating",
                  "title",
                  "content"
                ],
                "properties": {
                  "product": {
                    "type": "string",
                    "format": "objectId"
                  },
                  "overallRating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5
                  },
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 200
                  },
                  "content": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 5000
                  },
                  "subRatings": {
                    "type": "object",
                    "properties": {
                      "easeOfUse": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "customerSupport": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "features": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "pricing": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "technicalSupport": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      }
                    }
                  },
                  "reviewSource": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Review already exists for this product"
          }
        }
      },
      "get": {
        "summary": "Get all product reviews with filtering and pagination",
        "tags": [
          "Product Reviews"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search in title and content"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "approved",
                "rejected",
                "flagged"
              ]
            },
            "description": "Review status"
          },
          {
            "in": "query",
            "name": "overallRating",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 1,
                "maximum": 5
              }
            },
            "description": "Filter by rating stars"
          },
          {
            "in": "query",
            "name": "minRating",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5
            },
            "description": "Minimum rating"
          },
          {
            "in": "query",
            "name": "maxRating",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5
            },
            "description": "Maximum rating"
          },
          {
            "in": "query",
            "name": "isVerified",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by verification status"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "submittedAt",
                "publishedAt",
                "overallRating",
                "helpfulVotes.count"
              ]
            },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "mention",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by popular mentions"
          },
          {
            "in": "query",
            "name": "keywords",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by keywords"
          }
        ],
        "responses": {
          "200": {
            "description": "Reviews retrieved successfully"
          }
        }
      }
    },
    "/product-reviews/product/{productId}": {
      "get": {
        "summary": "Get reviews for a specific product",
        "tags": [
          "Product Reviews"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "in": "query",
            "name": "overallRating",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 1,
                "maximum": 5
              }
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "submittedAt",
                "publishedAt",
                "overallRating",
                "helpfulVotes.count"
              ]
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product reviews retrieved successfully"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/product-reviews/product/{productId}/my-review": {
      "get": {
        "summary": "Get current user's review for a specific product",
        "tags": [
          "Product Reviews"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's review retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Review not found or product not found"
          }
        }
      }
    },
    "/product-reviews/product/{productId}/stats": {
      "get": {
        "summary": "Get review statistics for a product",
        "tags": [
          "Product Reviews"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review statistics retrieved successfully"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/product-reviews/{id}": {
      "get": {
        "summary": "Get single review by ID",
        "tags": [
          "Product Reviews"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review retrieved successfully"
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "put": {
        "summary": "Update review (owner only)",
        "tags": [
          "Product Reviews"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "overallRating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5
                  },
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 200
                  },
                  "content": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 5000
                  },
                  "subRatings": {
                    "type": "object",
                    "properties": {
                      "easeOfUse": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "customerSupport": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "features": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "pricing": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      },
                      "technicalSupport": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 7
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Can only update own reviews"
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "delete": {
        "summary": "Delete review (owner or admin only)",
        "tags": [
          "Product Reviews"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Can only delete own reviews"
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/product-reviews/{id}/helpful": {
      "post": {
        "summary": "Vote review as helpful",
        "tags": [
          "Product Reviews"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vote added successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Review not found"
          },
          "409": {
            "description": "Already voted"
          }
        }
      },
      "delete": {
        "summary": "Remove helpful vote from review",
        "tags": [
          "Product Reviews"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vote removed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Review or vote not found"
          }
        }
      }
    },
    "/product-reviews/{id}/moderate": {
      "patch": {
        "summary": "Moderate review (admin only)",
        "tags": [
          "Product Reviews"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "approved",
                      "rejected",
                      "flagged"
                    ]
                  },
                  "moderationNote": {
                    "type": "string",
                    "maxLength": 500
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review moderated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Admin access required"
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/products": {
      "post": {
        "summary": "Create a new product (Vendors only)",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "description"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 100
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 2000
                  },
                  "website": {
                    "type": "string",
                    "format": "uri"
                  },
                  "websiteUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "software": {
                    "type": "string",
                    "enum": [
                      "SaaS",
                      "Desktop Application",
                      "Mobile App",
                      "Web Application",
                      "API/Service",
                      "Plugin/Extension",
                      "Other"
                    ]
                  },
                  "softwareIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "solutionIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "solutions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "industries": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "whoCanUse": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "languages": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "marketSegment": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "brandColors": {
                    "type": "string"
                  },
                  "logoUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "mediaUrls": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    }
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "approved",
                      "rejected",
                      "draft",
                      "published",
                      "archived"
                    ]
                  },
                  "isActive": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Only vendors can create products"
          }
        }
      },
      "get": {
        "summary": "Get products with filtering and pagination",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "approved",
                "rejected",
                "draft",
                "published",
                "archived"
              ]
            }
          },
          {
            "in": "query",
            "name": "software",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "name",
                "views",
                "likes",
                "avgRating",
                "totalReviews"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "isActive",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          },
          {
            "in": "query",
            "name": "minRating",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 5
            }
          },
          {
            "in": "query",
            "name": "maxRating",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully"
          }
        }
      }
    },
    "/products/active": {
      "get": {
        "summary": "Get all active products (published/approved and active)",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "name",
                "views",
                "likes",
                "avgRating",
                "totalReviews"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active products retrieved successfully"
          }
        }
      }
    },
    "/products/search": {
      "get": {
        "summary": "Search products",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Search query"
          },
          {
            "in": "query",
            "name": "software",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "industries",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "minRating",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 5
            }
          },
          {
            "in": "query",
            "name": "maxRating",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 5
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results retrieved successfully"
          }
        }
      }
    },
    "/products/stats": {
      "get": {
        "summary": "Get product statistics",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully"
          }
        }
      }
    },
    "/products/top-rated": {
      "get": {
        "summary": "Get top rated products",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Top rated products retrieved successfully"
          }
        }
      }
    },
    "/products/featured": {
      "get": {
        "summary": "Get featured products",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Featured products retrieved successfully"
          }
        }
      }
    },
    "/products/slug/{slug}": {
      "get": {
        "summary": "Get product by slug",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "summary": "Get product by ID",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          },
          {
            "in": "query",
            "name": "incrementViews",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to increment view count"
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "summary": "Update product (Vendor only - own products)",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 100
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 2000
                  },
                  "website": {
                    "type": "string",
                    "format": "uri"
                  },
                  "websiteUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "software": {
                    "type": "string",
                    "enum": [
                      "SaaS",
                      "Desktop Application",
                      "Mobile App",
                      "Web Application",
                      "API/Service",
                      "Plugin/Extension",
                      "Other"
                    ]
                  },
                  "softwareIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "solutionIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "solutions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "industries": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "whoCanUse": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "languages": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "marketSegment": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "objectId"
                    }
                  },
                  "brandColors": {
                    "type": "string"
                  },
                  "logoUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "mediaUrls": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    }
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "approved",
                      "rejected",
                      "draft",
                      "published",
                      "archived"
                    ]
                  },
                  "isActive": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Can only update own products"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "delete": {
        "summary": "Delete product (Vendor only - own products)",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "403": {
            "description": "Can only delete own products"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/{id}/toggle-status": {
      "patch": {
        "summary": "Toggle product status (active/inactive)",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product status toggled successfully"
          },
          "403": {
            "description": "Can only toggle own products"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/{productId}/rating": {
      "post": {
        "summary": "Update product rating (when review is added)",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "rating"
                ],
                "properties": {
                  "rating": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product rating updated successfully"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/my/products": {
      "get": {
        "summary": "Get my products (current user's products)",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "approved",
                "rejected",
                "draft",
                "published",
                "archived"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "name",
                "views",
                "likes",
                "avgRating",
                "totalReviews"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "My products retrieved successfully"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/products/user/{userId}": {
      "get": {
        "summary": "Get products by user/vendor",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "approved",
                "rejected",
                "draft",
                "published",
                "archived"
              ]
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "name",
                "views",
                "likes",
                "avgRating",
                "totalReviews"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User products retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/products/category/{category}/{subCategory}": {
      "get": {
        "summary": "Get products by category and subcategory",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Category (software or solutions)"
          },
          {
            "in": "path",
            "name": "subCategory",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Subcategory slug"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "name",
                "views",
                "likes",
                "avgRating",
                "totalReviews",
                "ratings-desc",
                "ratings-asc",
                "pricing-desc",
                "pricing-asc",
                "reviewCounts-desc",
                "reviewCounts-asc"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "segment",
            "schema": {
              "type": "string",
              "description": "Market segment filter"
            }
          },
          {
            "in": "query",
            "name": "categories",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of categories"
            }
          },
          {
            "in": "query",
            "name": "industries",
            "schema": {
              "type": "string",
              "description": "Comma-separated list of industries"
            }
          },
          {
            "in": "query",
            "name": "minPrice",
            "schema": {
              "type": "number",
              "minimum": 0,
              "description": "Minimum price filter"
            }
          },
          {
            "in": "query",
            "name": "maxPrice",
            "schema": {
              "type": "number",
              "minimum": 0,
              "description": "Maximum price filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully"
          },
          "404": {
            "description": "Category or subcategory not found"
          }
        }
      }
    },
    "/api/v1/resource-categories": {
      "post": {
        "summary": "Create a new resource category",
        "tags": [
          "Resource Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceCategory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource category created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all resource categories",
        "tags": [
          "Resource Categories"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource categories retrieved successfully"
          }
        }
      }
    },
    "/api/v1/resource-categories/active": {
      "get": {
        "summary": "Get active resource categories",
        "tags": [
          "Resource Categories"
        ],
        "responses": {
          "200": {
            "description": "Active resource categories retrieved successfully"
          }
        }
      }
    },
    "/api/v1/resource-categories/slug/{slug}": {
      "get": {
        "summary": "Get resource category by slug",
        "tags": [
          "Resource Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource category retrieved successfully"
          },
          "404": {
            "description": "Resource category not found"
          }
        }
      }
    },
    "/api/v1/resource-categories/{id}": {
      "get": {
        "summary": "Get resource category by ID",
        "tags": [
          "Resource Categories"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource category retrieved successfully"
          },
          "404": {
            "description": "Resource category not found"
          }
        }
      },
      "put": {
        "summary": "Update resource category",
        "tags": [
          "Resource Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resource category updated successfully"
          },
          "404": {
            "description": "Resource category not found"
          }
        }
      },
      "delete": {
        "summary": "Delete resource category",
        "tags": [
          "Resource Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource category deleted successfully"
          },
          "404": {
            "description": "Resource category not found"
          }
        }
      }
    },
    "/api/v1/resource-categories/{id}/toggle-status": {
      "patch": {
        "summary": "Toggle resource category status",
        "tags": [
          "Resource Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource category status toggled successfully"
          },
          "404": {
            "description": "Resource category not found"
          }
        }
      }
    },
    "/reviews/{reviewId}/replies": {
      "post": {
        "summary": "Create a new reply to a review",
        "tags": [
          "Review Replies"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reviewId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            },
            "description": "ID of the review to reply to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "content"
                ],
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 2000,
                    "description": "Reply content"
                  },
                  "replyType": {
                    "type": "string",
                    "enum": [
                      "user",
                      "vendor",
                      "admin"
                    ],
                    "default": "user",
                    "description": "Type of reply"
                  },
                  "parentReply": {
                    "type": "string",
                    "format": "objectId",
                    "description": "ID of parent reply (for nested replies)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reply created successfully"
          },
          "400": {
            "description": "Validation error or cannot reply to non-approved review"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "get": {
        "summary": "Get all replies for a specific review",
        "tags": [
          "Review Replies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reviewId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            },
            "description": "ID of the review"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "helpfulVotes.count"
              ],
              "default": "createdAt"
            },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "replyType",
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "vendor",
                "admin"
              ]
            },
            "description": "Filter by reply type"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "approved",
                "rejected",
                "flagged"
              ],
              "default": "approved"
            },
            "description": "Filter by reply status"
          }
        ],
        "responses": {
          "200": {
            "description": "Replies retrieved successfully"
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/replies": {
      "get": {
        "summary": "Get all replies (admin only)",
        "tags": [
          "Review Replies"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "approved",
                "rejected",
                "flagged"
              ]
            },
            "description": "Filter by reply status"
          },
          {
            "in": "query",
            "name": "replyType",
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "vendor",
                "admin"
              ]
            },
            "description": "Filter by reply type"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "helpfulVotes.count"
              ],
              "default": "createdAt"
            },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "All replies retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Admin access required"
          }
        }
      }
    },
    "/replies/{id}": {
      "get": {
        "summary": "Get a single reply by ID",
        "tags": [
          "Review Replies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            },
            "description": "Reply ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Reply retrieved successfully"
          },
          "404": {
            "description": "Reply not found"
          }
        }
      },
      "put": {
        "summary": "Update a reply (author only)",
        "tags": [
          "Review Replies"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            },
            "description": "Reply ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 2000,
                    "description": "Updated reply content"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reply updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Can only update own replies"
          },
          "404": {
            "description": "Reply not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a reply (author or admin only)",
        "tags": [
          "Review Replies"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            },
            "description": "Reply ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Reply deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Can only delete own replies"
          },
          "404": {
            "description": "Reply not found"
          }
        }
      }
    },
    "/replies/{id}/helpful": {
      "post": {
        "summary": "Vote reply as helpful",
        "tags": [
          "Review Replies"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            },
            "description": "Reply ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote added successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reply not found"
          },
          "409": {
            "description": "Already voted"
          }
        }
      },
      "delete": {
        "summary": "Remove helpful vote from reply",
        "tags": [
          "Review Replies"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            },
            "description": "Reply ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote removed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Reply or vote not found"
          }
        }
      }
    },
    "/api/v1/software": {
      "get": {
        "summary": "Get all software with search and pagination",
        "tags": [
          "Software"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            },
            "description": "Filter by status"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "status",
                "createdAt",
                "updatedAt"
              ]
            },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Software list retrieved successfully"
          }
        }
      },
      "post": {
        "summary": "Create new software",
        "tags": [
          "Software"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Software name"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Software created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/software/active": {
      "get": {
        "summary": "Get active software only",
        "tags": [
          "Software"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query"
          }
        ],
        "responses": {
          "200": {
            "description": "Active software retrieved successfully"
          }
        }
      }
    },
    "/api/v1/software/featured-with-products": {
      "get": {
        "summary": "Get featured softwares with their top-rated products",
        "tags": [
          "Software"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of softwares per page"
          },
          {
            "in": "query",
            "name": "productsPerSoftware",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20
            },
            "description": "Number of top products to return per software"
          },
          {
            "in": "query",
            "name": "minRating",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 5
            },
            "description": "Minimum rating filter for products"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "avgRating",
                "totalReviews",
                "productCount",
                "name"
              ]
            },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Featured softwares with top products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "software": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "slug": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "createdBy": {
                                "type": "object",
                                "properties": {
                                  "firstName": {
                                    "type": "string"
                                  },
                                  "lastName": {
                                    "type": "string"
                                  },
                                  "email": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "topProducts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "slug": {
                                  "type": "string"
                                },
                                "avgRating": {
                                  "type": "number"
                                },
                                "totalReviews": {
                                  "type": "number"
                                },
                                "logoUrl": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "productCount": {
                            "type": "number"
                          },
                          "hasMinimumProducts": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Featured softwares with top products retrieved successfully"
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        },
                        "totalItems": {
                          "type": "integer"
                        },
                        "itemsPerPage": {
                          "type": "integer"
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        },
                        "hasPrevPage": {
                          "type": "boolean"
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "totalSoftwaresWithProducts": {
                          "type": "integer"
                        },
                        "productsPerSoftware": {
                          "type": "integer"
                        },
                        "minRating": {
                          "type": "number"
                        },
                        "sortBy": {
                          "type": "string"
                        },
                        "sortOrder": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/software/{id}": {
      "get": {
        "summary": "Get software by ID",
        "tags": [
          "Software"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Software ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Software retrieved successfully"
          },
          "404": {
            "description": "Software not found"
          }
        }
      },
      "put": {
        "summary": "Update software",
        "tags": [
          "Software"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Software ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Software name"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Software updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Software not found"
          }
        }
      },
      "delete": {
        "summary": "Delete software",
        "tags": [
          "Software"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Software ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Software deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Software not found"
          }
        }
      }
    },
    "/api/v1/software/slug/{slug}": {
      "get": {
        "summary": "Get software by slug",
        "tags": [
          "Software"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Software slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Software retrieved successfully"
          },
          "404": {
            "description": "Software not found"
          }
        }
      }
    },
    "/api/v1/software/{id}/toggle-status": {
      "patch": {
        "summary": "Toggle software status",
        "tags": [
          "Software"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Software ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Software status toggled successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Software not found"
          }
        }
      }
    },
    "/api/v1/solutions": {
      "get": {
        "summary": "Get all solutions with search and pagination",
        "tags": [
          "Solutions"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            },
            "description": "Filter by status"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "status",
                "createdAt",
                "updatedAt"
              ]
            },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Solutions list retrieved successfully"
          }
        }
      },
      "post": {
        "summary": "Create new solution",
        "tags": [
          "Solutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Solution name"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Solution created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/solutions/active": {
      "get": {
        "summary": "Get active solutions only",
        "tags": [
          "Solutions"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query"
          }
        ],
        "responses": {
          "200": {
            "description": "Active solutions retrieved successfully"
          }
        }
      }
    },
    "/api/v1/solutions/{id}": {
      "get": {
        "summary": "Get solution by ID",
        "tags": [
          "Solutions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Solution ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Solution retrieved successfully"
          },
          "404": {
            "description": "Solution not found"
          }
        }
      },
      "put": {
        "summary": "Update solution",
        "tags": [
          "Solutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Solution ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Solution name"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Solution updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Solution not found"
          }
        }
      },
      "delete": {
        "summary": "Delete solution",
        "tags": [
          "Solutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Solution ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Solution deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Solution not found"
          }
        }
      }
    },
    "/api/v1/solutions/slug/{slug}": {
      "get": {
        "summary": "Get solution by slug",
        "tags": [
          "Solutions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Solution slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Solution retrieved successfully"
          },
          "404": {
            "description": "Solution not found"
          }
        }
      }
    },
    "/api/v1/solutions/{id}/toggle-status": {
      "patch": {
        "summary": "Toggle solution status",
        "tags": [
          "Solutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Solution ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Solution status toggled successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Solution not found"
          }
        }
      }
    },
    "/subscription/plans": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get all subscription plans",
        "description": "Retrieve all available subscription plans",
        "responses": {
          "200": {
            "description": "Subscription plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "name": {
                            "type": "string",
                            "example": "Standard"
                          },
                          "description": {
                            "type": "string",
                            "example": "Perfect for growing businesses"
                          },
                          "price": {
                            "type": "number",
                            "example": 12
                          },
                          "currency": {
                            "type": "string",
                            "example": "USD"
                          },
                          "period": {
                            "type": "string",
                            "example": "monthly"
                          },
                          "isFree": {
                            "type": "boolean",
                            "example": false
                          },
                          "trialDays": {
                            "type": "number",
                            "example": 7
                          },
                          "features": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "Enhanced branding",
                              "Advanced analytics",
                              "Review management"
                            ]
                          },
                          "buttonText": {
                            "type": "string",
                            "example": "Start Trial"
                          },
                          "formattedPrice": {
                            "type": "string",
                            "example": "$12.00"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription plans retrieved successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscription/current": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get current user subscription",
        "description": "Retrieve the authenticated user's current active subscription",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current subscription retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "507f1f77bcf86cd799439011"
                        },
                        "plan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "507f1f77bcf86cd799439012"
                            },
                            "name": {
                              "type": "string",
                              "example": "Standard"
                            },
                            "price": {
                              "type": "number",
                              "example": 12
                            },
                            "features": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "example": [
                                "Enhanced branding",
                                "Advanced analytics"
                              ]
                            }
                          }
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "trialing",
                            "canceled",
                            "past_due"
                          ],
                          "example": "active"
                        },
                        "isActive": {
                          "type": "boolean",
                          "example": true
                        },
                        "isTrialing": {
                          "type": "boolean",
                          "example": false
                        },
                        "currentPeriodStart": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T00:00:00.000Z"
                        },
                        "currentPeriodEnd": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-02-01T00:00:00.000Z"
                        },
                        "daysUntilExpiry": {
                          "type": "number",
                          "example": 15
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Current subscription retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "No active subscription found"
          }
        }
      }
    },
    "/subscription/checkout": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Create Stripe checkout session",
        "description": "Create a new Stripe checkout session for subscription purchase",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "planId"
                ],
                "properties": {
                  "planId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$",
                    "description": "Subscription plan ID",
                    "example": "507f1f77bcf86cd799439011"
                  },
                  "successUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to redirect to after successful payment",
                    "example": "https://example.com/success"
                  },
                  "cancelUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to redirect to after canceled payment",
                    "example": "https://example.com/cancel"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionId": {
                          "type": "string",
                          "description": "Stripe checkout session ID",
                          "example": "cs_test_1234567890"
                        },
                        "url": {
                          "type": "string",
                          "description": "Stripe checkout URL",
                          "example": "https://checkout.stripe.com/pay/cs_test_1234567890#fidkdWxOYHwnPyd1blpxYHZxWjA0T0lLNUNIbWJ3MHRgNGhLU18w="
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Checkout session created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or user already has subscription"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/subscription/billing-portal": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Create billing portal session",
        "description": "Create a Stripe billing portal session for subscription management",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Billing portal session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "Stripe billing portal URL",
                          "example": "https://billing.stripe.com/session/bps_1234567890"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Billing portal session created successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "No active subscription found"
          }
        }
      }
    },
    "/subscription/update": {
      "put": {
        "tags": [
          "Subscription"
        ],
        "summary": "Update subscription plan",
        "description": "Update the user's current subscription to a different plan",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newPlanId"
                ],
                "properties": {
                  "newPlanId": {
                    "type": "string",
                    "pattern": "^[0-9a-fA-F]{24}$",
                    "description": "New subscription plan ID",
                    "example": "507f1f77bcf86cd799439012"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated subscription object"
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "No active subscription found"
          }
        }
      }
    },
    "/subscription/cancel": {
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Cancel subscription",
        "description": "Cancel the user's current subscription (will remain active until period end)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Optional cancellation reason",
                    "example": "No longer needed"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription canceled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated subscription object"
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription canceled successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "No active subscription found"
          }
        }
      }
    },
    "/subscription/resume": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Resume canceled subscription",
        "description": "Resume a previously canceled subscription",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription resumed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated subscription object"
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription resumed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Subscription is not canceled"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "No active subscription found"
          }
        }
      }
    },
    "/subscription/process-pending": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Process pending checkout sessions (Development)",
        "description": "Check for completed Stripe checkout sessions and create local subscription records",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Pending checkouts processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "processedCount": {
                          "type": "number",
                          "example": 1
                        },
                        "totalCompleted": {
                          "type": "number",
                          "example": 1
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Processed 1 pending checkout sessions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/subscription/complete-checkout": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Complete open checkout session manually (Development)",
        "description": "Manually complete an open Stripe checkout session for development",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "description": "Optional specific session ID to complete",
                    "example": "cs_test_1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionId": {
                          "type": "string",
                          "example": "cs_test_1234567890"
                        },
                        "subscriptionId": {
                          "type": "string",
                          "example": "sub_1234567890"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Checkout session completed manually"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "No open session found"
          }
        }
      }
    },
    "/subscription/cleanup-test": {
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Clean up test subscriptions (Development)",
        "description": "Remove all test subscriptions for the authenticated user (development only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Test subscriptions cleaned up successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cleanedCount": {
                          "type": "number",
                          "example": 1
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Cleaned up 1 test subscriptions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Not allowed in production"
          }
        }
      }
    },
    "/subscription/webhook": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Stripe webhook endpoint",
        "description": "Handle Stripe webhook events for subscription management",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Stripe webhook event data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "received": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid webhook signature"
          },
          "500": {
            "description": "Webhook processing failed"
          }
        }
      }
    },
    "/subscription/analytics": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get subscription analytics",
        "description": "Get subscription analytics and statistics (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for analytics period",
            "example": "2024-01-01"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for analytics period",
            "example": "2024-12-31"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalSubscriptions": {
                          "type": "number",
                          "example": 150
                        },
                        "activeSubscriptions": {
                          "type": "number",
                          "example": 120
                        },
                        "canceledSubscriptions": {
                          "type": "number",
                          "example": 25
                        },
                        "trialSubscriptions": {
                          "type": "number",
                          "example": 15
                        },
                        "totalRevenue": {
                          "type": "number",
                          "example": 1800
                        },
                        "planDistribution": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "Standard"
                              },
                              "count": {
                                "type": "number",
                                "example": 85
                              }
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription analytics retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Admin access required"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users or search users",
        "description": "Retrieve all users or search for users by name, email, or other criteria",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "example": "john"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "vendor",
                "admin"
              ]
            },
            "description": "Filter by user role",
            "example": "vendor"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of results per page",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "507f1f77bcf86cd799439011"
                          },
                          "firstName": {
                            "type": "string",
                            "example": "John"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Doe"
                          },
                          "email": {
                            "type": "string",
                            "example": "john.doe@example.com"
                          },
                          "role": {
                            "type": "string",
                            "example": "user"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "limit": {
                              "type": "integer",
                              "example": 10
                            },
                            "total": {
                              "type": "integer",
                              "example": 25
                            },
                            "pages": {
                              "type": "integer",
                              "example": 3
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Users fetched successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Authentication required"
                        },
                        "code": {
                          "type": "string",
                          "example": "AUTHENTICATION_REQUIRED"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 401
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user profile",
        "description": "Retrieve the authenticated user's profile information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "507f1f77bcf86cd799439011"
                            },
                            "firstName": {
                              "type": "string",
                              "example": "John"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Doe"
                            },
                            "email": {
                              "type": "string",
                              "example": "john.doe@example.com"
                            },
                            "role": {
                              "type": "string",
                              "example": "user"
                            },
                            "companyName": {
                              "type": "string",
                              "example": "Tech Solutions Inc"
                            },
                            "isVerified": {
                              "type": "boolean",
                              "example": true
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Authentication required"
                        },
                        "code": {
                          "type": "string",
                          "example": "AUTHENTICATION_REQUIRED"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 401
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user profile",
        "description": "Update the authenticated user's profile information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "description": "User's first name",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "description": "User's last name",
                    "example": "Doe"
                  },
                  "companyName": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Company name (for vendors)",
                    "example": "Tech Solutions Inc"
                  },
                  "companyEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Company email (for vendors)",
                    "example": "contact@techsolutions.com"
                  },
                  "industry": {
                    "type": "string",
                    "description": "Industry sector (for vendors)",
                    "example": "Technology"
                  },
                  "companySize": {
                    "type": "string",
                    "description": "Company size (for vendors)",
                    "example": "51-100 Employees"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "User description",
                    "example": "Software developer with 5 years of experience"
                  },
                  "region": {
                    "type": "string",
                    "description": "User's region",
                    "example": "US"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "507f1f77bcf86cd799439011"
                            },
                            "firstName": {
                              "type": "string",
                              "example": "John"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Doe"
                            },
                            "email": {
                              "type": "string",
                              "example": "john.doe@example.com"
                            },
                            "role": {
                              "type": "string",
                              "example": "user"
                            },
                            "companyName": {
                              "type": "string",
                              "example": "Tech Solutions Inc"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/users/public-profile/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user public profile",
        "description": "Retrieve public profile information for any user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "description": "User ID (MongoDB ObjectId)",
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "200": {
            "description": "Public profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "507f1f77bcf86cd799439011"
                            },
                            "firstName": {
                              "type": "string",
                              "example": "John"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Doe"
                            },
                            "role": {
                              "type": "string",
                              "example": "user"
                            },
                            "companyName": {
                              "type": "string",
                              "example": "Tech Solutions Inc"
                            },
                            "isVerified": {
                              "type": "boolean",
                              "example": true
                            },
                            "followersCount": {
                              "type": "integer",
                              "example": 42
                            },
                            "followingCount": {
                              "type": "integer",
                              "example": 15
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Public profile retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User not found"
                        },
                        "code": {
                          "type": "string",
                          "example": "USER_NOT_FOUND"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 404
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/public-profile/slug/{slug}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user public profile by slug",
        "description": "Retrieve public profile information for any user using their slug",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User slug (e.g., john-doe)",
            "example": "john-doe"
          }
        ],
        "responses": {
          "200": {
            "description": "Public profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string",
                              "example": "507f1f77bcf86cd799439011"
                            },
                            "firstName": {
                              "type": "string",
                              "example": "John"
                            },
                            "lastName": {
                              "type": "string",
                              "example": "Doe"
                            },
                            "slug": {
                              "type": "string",
                              "example": "john-doe"
                            },
                            "userType": {
                              "type": "string",
                              "example": "user"
                            },
                            "companyName": {
                              "type": "string",
                              "example": "Tech Solutions Inc"
                            },
                            "isVerified": {
                              "type": "boolean",
                              "example": true
                            },
                            "followersCount": {
                              "type": "integer",
                              "example": 42
                            },
                            "followingCount": {
                              "type": "integer",
                              "example": 15
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Public profile retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid slug format"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/change-password": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Change user password",
        "description": "Change the authenticated user's password. Sends email confirmation and in-app notification upon successful password change.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "newPassword",
                  "confirmNewPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "description": "Current password",
                    "example": "CurrentPassword123!"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 128,
                    "description": "New password (8-128 characters)",
                    "example": "NewPassword123!"
                  },
                  "confirmNewPassword": {
                    "type": "string",
                    "description": "Password confirmation",
                    "example": "NewPassword123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully. Email confirmation sent and notification created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Password changed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid current password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Current password is incorrect"
                        },
                        "code": {
                          "type": "string",
                          "example": "INVALID_CURRENT_PASSWORD"
                        },
                        "statusCode": {
                          "type": "integer",
                          "example": 400
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/users/{userId}/reviews": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user's reviews",
        "description": "Retrieve all approved reviews written by a specific user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "description": "User ID (MongoDB ObjectId)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20,
              "default": 10
            },
            "description": "Number of reviews per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "publishedAt",
                "overallRating",
                "title"
              ],
              "default": "publishedAt"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "User reviews retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "reviews": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              },
                              "overallRating": {
                                "type": "integer"
                              },
                              "publishedAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "product": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "slug": {
                                    "type": "string"
                                  },
                                  "logo": {
                                    "type": "string"
                                  },
                                  "avgRating": {
                                    "type": "number"
                                  },
                                  "totalReviews": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "currentPage": {
                              "type": "integer"
                            },
                            "totalPages": {
                              "type": "integer"
                            },
                            "totalItems": {
                              "type": "integer"
                            },
                            "itemsPerPage": {
                              "type": "integer"
                            },
                            "hasNext": {
                              "type": "boolean"
                            },
                            "hasPrev": {
                              "type": "boolean"
                            }
                          }
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "User reviews retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/profile-stats": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user's profile statistics",
        "description": "Retrieve statistics for a user's profile including reviews count, disputes, followers, and following",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            },
            "description": "User ID (MongoDB ObjectId)"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "reviewsWritten": {
                          "type": "integer",
                          "example": 4
                        },
                        "disputes": {
                          "type": "integer",
                          "example": 0
                        },
                        "followers": {
                          "type": "integer",
                          "example": 1200
                        },
                        "following": {
                          "type": "integer",
                          "example": 1100
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "User profile statistics retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/slug/{slug}/reviews": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user's reviews by slug",
        "description": "Retrieve all approved reviews written by a specific user using their slug",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User slug (e.g., john-doe)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20,
              "default": 10
            },
            "description": "Number of reviews per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "publishedAt",
                "overallRating",
                "title"
              ],
              "default": "publishedAt"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "User reviews retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/slug/{slug}/profile-stats": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user's profile statistics by slug",
        "description": "Retrieve statistics for a user's profile using their slug",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User slug (e.g., john-doe)"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile statistics retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "tags": []
}